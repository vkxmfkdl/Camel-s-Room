#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var filesys_1 = require("./filesys");
var cliopts_1 = require("./cliopts");
var vet_1 = require("./vet");
var index_1 = require("./renderers/index");
var vetPkgFile = require('../package.json');
/*
 * Setup the CLI args
 */
program
    .version(vetPkgFile.version)
    .option('-p, --package <package>', 'package.json file location', '')
    .option('-m, --modules <modules>', 'node_modules folder location', '')
    .option('-r, --renderer <renderer>', 'Renderer to use', 'inlinetable')
    .option('-s, --strict', 'Using the CI renderer, fail build if any packages unlocked');
/*
 * Setup the paths using the CLI options and
 * validate that the package.json file and
 * node_modules folder exists.
 */
var opts = cliopts_1.getCLIOptions(program.parse(process.argv));
var paths = cliopts_1.makeVetPaths(opts);
if (!filesys_1.fileExists(paths.packagePath)) {
    throw new Error("Cannot find package.json file at " + paths.packagePath);
}
if (!filesys_1.folderExists(paths.modulesPath)) {
    throw new Error("Cannot find node_modules file at " + paths.packagePath);
}
/*
 * Get the renderer we'll use
 */
var renderer = index_1.getRenderer(opts.renderer);
/*
 * Require the package.json file
 */
var packageFile = require(paths.packagePath);
/*
 * Create the package descriptor map and render
 */
var map = vet_1.default(packageFile, paths.modulesPath);
renderer(map, opts);
